{
  "My C++ Boilerplate": {
    "prefix": "cpp",
    "body": [
      "#include <bits/stdc++.h>",
      "//#include <ext/pb_ds/assoc_container.hpp>",
      "//#include <ext/pb_ds/tree_policy.hpp>",
      "//using namespace __gnu_pbds;",
      "using namespace std;",
      "",
      "#define int long long",
      "#define endl '\\n'",
      "#define inf (1LL << 60)",
      "#define all(x) (x).begin(), (x).end()",
      "#define pb push_back",
      "#define pi pair<int, int>",
      "#define vi vector<int>",
      "#define vvi vector<vector<int>>",
      "#define vpi vector<pair<int, int>>",
      "#define ff first",
      "#define ss second",
      "// Loop macros",
      "#define FOR(i, n) for(int i = 0; i < (n); i++)",
      "#define FOR1(i, n) for(int i = 1; i <= (n); i++)",
      "#define FORR(i, n) for(int i = (n) - 1; i >= 0; i--)",
      "#define FORE(x, v) for(auto &x : v)",
      "const int MOD = 1e9 + 7;",
      "",
      "// ---------------- Policy Based Data Structure ----------------",
      "//typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> raj_tree;",
      "// raj_tree rs;",
      "// rs.insert(x);              -> insert an element",
      "// rs.erase(x);               -> erase element",
      "// *rs.find_by_order(k);      -> k-th smallest (0-indexed)",
      "// rs.order_of_key(x);        -> number of elements < x",
      "",
      "// ---------------- Utility Functions ----------------",
      "int gcd(int a, int b) { return b == 0 ? a : gcd(b, a % b); }",
      "int lcm(int a, int b) { return (a / gcd(a, b)) * b; }",
      "",
      "int power(int a, int b) {",
      "    int res = 1;",
      "    while(b) {",
      "        if(b & 1) res *= a;",
      "        a *= a;",
      "        b >>= 1;",
      "    }",
      "    return res;",
      "}",
      "",
      "int modpow(int a, int b, int mod = MOD) {",
      "    int res = 1;",
      "    a %= mod;",
      "    while(b) {",
      "        if(b & 1) res = (res * a) % mod;",
      "        a = (a * a) % mod;",
      "        b >>= 1;",
      "    }",
      "    return res;",
      "}",
      "",
      "// ---------------- Debug & Printing ----------------",
      "template<typename T>",
      "void print1D(const vector<T>& v) {",
      "    FORE(x, v) cout << x << ' ';",
      "    cout << endl;",
      "}",
      "",
      "template<typename T>",
      "void print2D(const vector<vector<T>>& mat) {",
      "    FORE(row, mat) {",
      "        FORE(x, row) cout << x << ' ';",
      "        cout << endl;",
      "    }",
      "}",
      "",
      "int func(int n) {",
      "   return 0;",
      "   // enter your logic here",
      "}",
      "// ---------------- Main ----------------",
      "signed main() {",
      "    ios::sync_with_stdio(false);",
      "    cin.tie(NULL);",
      "",
      "    int t; cin >> t;",
      "    while(t--) {",
      "    }",
      "    return 0;",
      "}"
    ],
    "description": "C++ Competitive Programming Template with raj_tree (GNU PBDS), loop macros, and utilities.\n\nUSAGE GUIDE:\n- raj_tree (PBDS):\n  raj_tree rs;\n  rs.insert(10);\n  rs.insert(20);\n  cout << *rs.find_by_order(0);   // 10 (smallest)\n  cout << rs.order_of_key(15);    // 1 (elements < 15)\n\n- Loop Macros:\n  FOR(i, n)      -> for(int i=0; i<n; i++)\n  FOR1(i, n)     -> for(int i=1; i<=n; i++)\n  FORR(i, n)     -> for(int i=n-1; i>=0; i--)\n  FORE(x, v)     -> range-based for(auto &x : v)\n\n- Utility Functions:\n  gcd(a, b), lcm(a, b), power(a, b), modpow(a, b, MOD)\n\n- Printing Helpers:\n  print1D(v), print2D(mat)\n\nNote: main() only has input skeleton, no processing/output. Add your logic after inputs."
  },
  "leetcode c++ boilerplate": {
    "prefix": "lc",
    "body": [
      "#include <bits/stdc++.h>",
      "using namespace std;",
      "",
      "class Solution {",
      "public:",
      "    // Add your methods here",
      "};",
      "",
      "int main() {",
      "    Solution sol;",
      "    // call your functions here",
      "    return 0;",
      "}"
    ],
    "description": "C++ Boilerplate for LeetCode problems with a Solution class template."
  }
}
